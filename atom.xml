<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>accord</title>
  <subtitle>web前端</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.taoyage.net/"/>
  <updated>2017-08-12T16:16:23.000Z</updated>
  <id>http://www.taoyage.net/</id>
  
  <author>
    <name>accord</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angular4入门</title>
    <link href="http://www.taoyage.net/2017/08/12/Angular4%E5%85%A5%E9%97%A8/"/>
    <id>http://www.taoyage.net/2017/08/12/Angular4入门/</id>
    <published>2017-08-12T09:35:20.000Z</published>
    <updated>2017-08-12T16:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Angular架构"><a href="#Angular架构" class="headerlink" title="Angular架构"></a>Angular架构</h2><p><img src="/2017/08/12/Angular4入门/architecture.png" alt="Angular架构"></p>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>Angular组件是Angualr应用的基本构件块，是一个带有业务逻辑和数据的html，一个组件可以包含多个子组件，组件可以通过依赖注入去调用服务。</p>
<h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>Angular中的服务，用来封装可重用的业务逻辑，服务之间也可通过依赖注入相互调用。</p>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>Angular模块用来将应用中不同的部分组织成一个Angular框架可以理解的单元的方式，从上图来看Angular中组件+服务完成的是一个功能，而模块相当于去打包，分发这些功能。<br>比如通过组件，服务，指令来完成一个登陆注册模块。</p>
<h2 id="Angular开发环境"><a href="#Angular开发环境" class="headerlink" title="Angular开发环境"></a>Angular开发环境</h2><ul>
<li>安装Nodejs</li>
<li>Angular CLI  <code>$ npm install -g @angular/cli</code> </li>
</ul>
<h3 id="通过Angular-CLI创建一个应用"><a href="#通过Angular-CLI创建一个应用" class="headerlink" title="通过Angular CLI创建一个应用"></a>通过Angular CLI创建一个应用</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ng <span class="keyword">new</span> <span class="type">my</span>-app</div></pre></td></tr></table></figure>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><table>
<thead>
<tr>
<th>File</th>
<th>Purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td>e2e/</td>
<td>单元测试</td>
</tr>
<tr>
<td>src/</td>
<td>应用源代码目录</td>
</tr>
<tr>
<td>.angular-cli.json</td>
<td>angular命令行工具配置文件</td>
</tr>
<tr>
<td>karma.conf.js</td>
<td>自动化测试</td>
</tr>
<tr>
<td>package.json</td>
<td>npm配置文件</td>
</tr>
<tr>
<td>protractor.conf.js</td>
<td>自动化测试配置文件</td>
</tr>
<tr>
<td>tslint.json</td>
<td>TypeScript质量检查的一些规则定义</td>
</tr>
<tr>
<td>tsconfig.json</td>
<td>TypeScript编译器配置</td>
</tr>
</tbody>
</table>
<h2 id="组件元素"><a href="#组件元素" class="headerlink" title="组件元素"></a>组件元素</h2><p><img src="/2017/08/12/Angular4入门/component.png" alt="Angular组件元素"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Angular架构&quot;&gt;&lt;a href=&quot;#Angular架构&quot; class=&quot;headerlink&quot; title=&quot;Angular架构&quot;&gt;&lt;/a&gt;Angular架构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2017/08/12/Angular4入门/architect
    
    </summary>
    
      <category term="web前端" scheme="http://www.taoyage.net/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="-- Angular4 -- Angular4入门 -- 前端流行框架" scheme="http://www.taoyage.net/tags/Angular4-Angular4%E5%85%A5%E9%97%A8-%E5%89%8D%E7%AB%AF%E6%B5%81%E8%A1%8C%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Node学习笔记2——异步I/O</title>
    <link href="http://www.taoyage.net/2016/11/30/Node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E2%80%94%E2%80%94%E5%BC%82%E6%AD%A5I-O/"/>
    <id>http://www.taoyage.net/2016/11/30/Node学习笔记2——异步I-O/</id>
    <published>2016-11-30T08:40:25.000Z</published>
    <updated>2016-12-05T08:34:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2016/11/30/Node学习笔记2——异步I-O/异步I／O.png" alt="异步I／O.png"></p>
<h2 id="Nodejs单线程"><a href="#Nodejs单线程" class="headerlink" title="Nodejs单线程"></a>Nodejs单线程</h2><p>Node采用chrome v8引擎处理javascript脚本,v8引擎最大的特点就是单线程运行,一次只能运行一个任务</p>
<h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>这里进程与线程的概念引用阮一峰的一篇关于进程与线程的文章,点击可查看<a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="external">原文链接</a></p>
<ol>
<li><p>计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。</p>
</li>
<li><p>假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，单个CPU一次只能运行一个任务。</p>
</li>
<li><p>进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。</p>
</li>
<li><p>一个车间里，可以有很多工人。他们协同完成一个任务。</p>
</li>
<li><p>线程就好比车间里的工人。一个进程可以包括多个线程。</p>
</li>
<li><p>车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存</p>
</li>
<li><p>可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存</p>
</li>
<li><p>一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫”互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。</p>
</li>
<li><p>还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。</p>
</li>
<li><p>这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做”信号量”（Semaphore），用来保证多个线程不会互相冲突。<br>不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。</p>
</li>
<li><p>操作系统的设计，因此可以归结为三点：<br>（1）以多进程形式，允许多个任务同时运行；<br>（2）以多线程形式，允许单个任务分成不同的部分运行；<br>（3）提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。</p>
</li>
</ol>
<h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p>同步就是指后一个任务需要等待前一个任务完成后才会去执行,整个程序的执行顺序与任务的排序一致.</p>
<p>异步则与同步相对,每一个任务至少有一个callback，在一个任务完成之后，会执行此任务的回调，而后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的。</p>
<p>举个例子：<br>你打电话给你秘书帮你办点事情,秘书回答说’好，立刻去办’，如果是在同步的情况下可能会因为秘书在办完这件事之前,你无法去做下面的一件事,你可以做的就是等着秘书做完你交待的事情,给你答复后,你才可以继续去做手上的其他事情,而如果是异步的话,在秘书把事情做完之前,你可以先继续做其他事情,等秘书做完了自然会通知你一声。</p>
<h2 id="Node中的异步实现"><a href="#Node中的异步实现" class="headerlink" title="Node中的异步实现"></a>Node中的异步实现</h2><p><img src="/2016/11/30/Node学习笔记2——异步I-O/event-loop.png" alt="event-loop"></p>
<p>在上图中,我们看到node将异步任务丢到了事件队列当中,而事件循环不断的检查事件，当发现有一个事件时,会从线程池中提取一个线程并执行处理该事件函数,然后调用回调函数.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>再总结一下nodeJS的整个执行过程:</p>
<ul>
<li>v8引擎解析javascript脚本.</li>
<li>解析后的代码调用node核心模块,将参数和回调函数传入到核心模块.</li>
<li>node中的libuv库负责node api的执行, 它利用事件循环机制从线程池中提取线程来执行事件队列中的任务,以异步的方式将任务返回给v8引擎.</li>
<li>v8引擎将结果返回给客户端</li>
</ul>
<p>上一章中简单的提到过libuv库是一个用c语言实现的库,它为Nodejs提供的跨平台的操作,在其内部提供了事件循环(Event Loop),线程池,异步I/O等功能。</p>
<p>在这篇文章中因为时间关系,对node的异步I/O的知识点介绍的并不完整,之后会补全.<br>另外本人也只是一个node初学者,如果文章中有错误的地方,或者我对node的理解有误的话望高手留言指点一二,谢谢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2016/11/30/Node学习笔记2——异步I-O/异步I／O.png&quot; alt=&quot;异步I／O.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Nodejs单线程&quot;&gt;&lt;a href=&quot;#Nodejs单线程&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="后台开发" scheme="http://www.taoyage.net/categories/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="nodejs学习笔记" scheme="http://www.taoyage.net/tags/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="nodejs异步I/O" scheme="http://www.taoyage.net/tags/nodejs%E5%BC%82%E6%AD%A5I-O/"/>
    
      <category term="nodejs异步原理" scheme="http://www.taoyage.net/tags/nodejs%E5%BC%82%E6%AD%A5%E5%8E%9F%E7%90%86/"/>
    
      <category term="nodejs" scheme="http://www.taoyage.net/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Node学习笔记1——初识NodeJs</title>
    <link href="http://www.taoyage.net/2016/11/25/Node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E2%80%94%E2%80%94%E5%88%9D%E8%AF%86Node/"/>
    <id>http://www.taoyage.net/2016/11/25/Node学习笔记1——初识Node/</id>
    <published>2016-11-25T07:07:50.000Z</published>
    <updated>2016-11-25T08:43:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2016/11/25/Node学习笔记1——初识Node/初识node.png" alt="初识Nodejs脑图"></p>
<h2 id="什么是NodeJs"><a href="#什么是NodeJs" class="headerlink" title="什么是NodeJs"></a>什么是NodeJs</h2><p>Node.js是一个基于ChromeV8引擎的Javascript运行环境。Node.js使用了一个事件驱动、非阻塞式IO的模型，使其轻量又高效。Node.js的包管理器npm，是全球最大的开源库生态系统。简单来说Node是js的一个虚拟机（平台）,能够解析js代码,使其运行在各个平台,这有点类似java的jvm。同时Node平台内部提供了大量的工具库,使js能与操作系统进行交互,例如读写文件。</p>
<h2 id="NodeJs的诞生历程"><a href="#NodeJs的诞生历程" class="headerlink" title="NodeJs的诞生历程"></a>NodeJs的诞生历程</h2><ul>
<li>2009年3月，Ryan Dahl在博客宣布创建</li>
<li>2009年5月，Ryan Dahl在GitHub中开源了最初版本，同年11月的JSConf就安排了Node讲座</li>
<li>2010年底，Ryan Dahl加入Joyent全职负责Node的发展</li>
<li>2011年7月，在微软的支持下登陆Windows平台</li>
<li>2012年1月底，Ryan Dahl将掌门人身份交给NPM的作者lssac Z.Schlueter</li>
<li>2013年7月，发布稳定版v0.10.13</li>
<li>随后，Node的发布计划主要集中在性能上面，由V0.14后正式发布了V1.0版本</li>
</ul>
<h2 id="Nodejs的特点"><a href="#Nodejs的特点" class="headerlink" title="Nodejs的特点"></a>Nodejs的特点</h2><ul>
<li>异步I/O</li>
<li>单线程</li>
<li>事件与回调函数</li>
<li>跨平台</li>
</ul>
<h2 id="NodeJs结构"><a href="#NodeJs结构" class="headerlink" title="NodeJs结构"></a>NodeJs结构</h2><p><img src="/2016/11/25/Node学习笔记1——初识Node/Node_construction.jpeg" alt="Node_construction"></p>
<p>从上面这张图来看,NodeJS的结构分为3层:</p>
<ul>
<li><p>Node standard Libarary(Node.js标准库),源码在lib目录下,是一个用javascript编写的库,里面包含了http,fs,events,buffer等Nodejs提供的核心模块,<br>javascript能够通过Api直接去调用这些模块,例如: <code>let fs = require(&#39;fs&#39;)</code> 。</p>
</li>
<li><p>第二层的Node bindings是js与底层沟通的一座桥梁,使其能与底层相互沟通,bindings是一个又c++实现,源码在src/node.cc。</p>
</li>
<li><p>最后一层是node的最底层结构</p>
<ul>
<li><p>V8: Google开源的高性能JavaScript引擎,以C++实现。这也是集成在Chrome中的JS引擎V8将你写的JavaScript<br>代码编译为机器码然后执行。</p>
</li>
<li><p>Libuv: 是一个用c语言实现的库,它为Nodejs提供的跨平台的操作,在其内部提供了事件循环(Event Loop),线程池,异步I/O等功能。</p>
</li>
<li><p>C-ares：提供了异步处理DNS相关的能力。</p>
</li>
<li><p>http_parser、OpenSSL、zlib 等：提供包括http解析、SSL安全协议、数据压缩等其他的能力。</p>
</li>
</ul>
</li>
</ul>
<h2 id="NodeJs在web中的使用"><a href="#NodeJs在web中的使用" class="headerlink" title="NodeJs在web中的使用"></a>NodeJs在web中的使用</h2><p><img src="/2016/11/25/Node学习笔记1——初识Node/web1.png" alt="web应用1"></p>
<p>这张图是把Node作为一个服务器来处理所有用户的接受和响应</p>
<p><img src="/2016/11/25/Node学习笔记1——初识Node/web2.png" alt="web应用2"></p>
<p>这张图是把Node作为一个中间服务器来用,主要是进行分发等工作,具体步骤是Node来接受客户端传来的信息,然后把事件交托给传统java等服务器来处理,处理完后返回给node服务器,然后响应给客户端</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2016/11/25/Node学习笔记1——初识Node/初识node.png&quot; alt=&quot;初识Nodejs脑图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是NodeJs&quot;&gt;&lt;a href=&quot;#什么是NodeJs&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="后台开发" scheme="http://www.taoyage.net/categories/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="-- NodeJs学习笔记 -- NodeJs -- NodeJs简介" scheme="http://www.taoyage.net/tags/NodeJs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-NodeJs-NodeJs%E7%AE%80%E4%BB%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用babel启动node并解析es6语法</title>
    <link href="http://www.taoyage.net/2016/11/12/%E4%BD%BF%E7%94%A8babel%E6%9D%A5%E8%A7%A3%E6%9E%90nodejs%E4%B8%AD%E7%9A%84es6%E5%B9%B6%E5%90%AF%E5%8A%A8/"/>
    <id>http://www.taoyage.net/2016/11/12/使用babel来解析nodejs中的es6并启动/</id>
    <published>2016-11-12T15:36:30.000Z</published>
    <updated>2016-11-12T15:03:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="babel安装"><a href="#babel安装" class="headerlink" title="babel安装"></a>babel安装</h2><p>使用前先安装babel-cli</p>
<p><code>$ npm install --save-dev babel-cli</code></p>
<p>安装完成后,在你的package.json文件里应该会出现像下面这样的:</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"devDependencies"</span>: &#123;</div><div class="line">   	<span class="string">"babel-cli"</span>: <span class="string">"^6.18.0"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建babel配置文件-babelrc"><a href="#创建babel配置文件-babelrc" class="headerlink" title="创建babel配置文件.babelrc"></a>创建babel配置文件.babelrc</h2><p>使用babel需要在根目录下添加.babelrc配置文件,这个文件用来设置转码的规则和插件,<br>像下面这样我配置了es2015和react的转码</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [</div><div class="line">    <span class="string">"es2015"</span>,</div><div class="line">    <span class="string">"react"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"plugins"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用前需要安装<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> babel-preset-es2015</div><div class="line">$ npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> babel-preset-react</div></pre></td></tr></table></figure></p>
<h2 id="启动用es6写的nodejs"><a href="#启动用es6写的nodejs" class="headerlink" title="启动用es6写的nodejs"></a>启动用es6写的nodejs</h2><p>babel-cli里自带babel-node命令<br>假设你的node入口文件名为server.js,在package.json进行如下配置:</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">  <span class="string">"start"</span>: <span class="string">"babel-node server.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后通过 <code>$ npm start</code> 命令来启动nodejs</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;babel安装&quot;&gt;&lt;a href=&quot;#babel安装&quot; class=&quot;headerlink&quot; title=&quot;babel安装&quot;&gt;&lt;/a&gt;babel安装&lt;/h2&gt;&lt;p&gt;使用前先安装babel-cli&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ npm install --save-
    
    </summary>
    
      <category term="前端开发工具" scheme="http://www.taoyage.net/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="-- babel -- babel启动node -- babel解析es6语法" scheme="http://www.taoyage.net/tags/babel-babel%E5%90%AF%E5%8A%A8node-babel%E8%A7%A3%E6%9E%90es6%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>sublime前端常用插件</title>
    <link href="http://www.taoyage.net/2016/11/12/sublime%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <id>http://www.taoyage.net/2016/11/12/sublime前端常用插件/</id>
    <published>2016-11-12T07:20:45.000Z</published>
    <updated>2016-11-12T07:39:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Package Control : 插件管理</p>
<p>Emmet : 提高写代码的效率</p>
<p>File Header : 自动添加文件头部注释</p>
<p>HTML-CSS-JS Prettify : 代码缩进</p>
<p>SideBarEnhancements : 右键菜单增强插件</p>
<p>SublimeCodeIntel : 代码提示工具</p>
<p>Autoprefixer : css3前缀自动补全</p>
<p>ColorPicker : 可调用调色盘</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Package Control : 插件管理&lt;/p&gt;
&lt;p&gt;Emmet : 提高写代码的效率&lt;/p&gt;
&lt;p&gt;File Header : 自动添加文件头部注释&lt;/p&gt;
&lt;p&gt;HTML-CSS-JS Prettify : 代码缩进&lt;/p&gt;
&lt;p&gt;SideBarEnhanceme
    
    </summary>
    
      <category term="前端开发工具" scheme="http://www.taoyage.net/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="-- sublime -- sublime插件" scheme="http://www.taoyage.net/tags/sublime-sublime%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>前端优化方法</title>
    <link href="http://www.taoyage.net/2016/10/29/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    <id>http://www.taoyage.net/2016/10/29/前端优化方法/</id>
    <published>2016-10-29T15:12:06.000Z</published>
    <updated>2016-10-30T05:24:34.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>合并js以及css文件来减少http的请求数</li>
<li>合并图片减少http请求数</li>
<li>使用cdn （还不是很了解）</li>
<li>把样式表放在顶部,让页面逐步渲染,提高客户体验</li>
<li>js脚本放在底部加载</li>
<li>访问量大的页面可采用行内js来减少http请求,当页面加载完以后再动态加载外部文件。</li>
<li>压缩js和css等文件</li>
</ol>
<p>暂时先列了这些,自己也在学习中,之后会进行添加,并把每一条的实现方法详细写出来</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;合并js以及css文件来减少http的请求数&lt;/li&gt;
&lt;li&gt;合并图片减少http请求数&lt;/li&gt;
&lt;li&gt;使用cdn （还不是很了解）&lt;/li&gt;
&lt;li&gt;把样式表放在顶部,让页面逐步渲染,提高客户体验&lt;/li&gt;
&lt;li&gt;js脚本放在底部加载&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="web前端" scheme="http://www.taoyage.net/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端优化" scheme="http://www.taoyage.net/tags/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>jsonp函数实现方法</title>
    <link href="http://www.taoyage.net/2016/10/08/jsonp%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/"/>
    <id>http://www.taoyage.net/2016/10/08/jsonp函数实现方法/</id>
    <published>2016-10-08T07:47:44.000Z</published>
    <updated>2016-10-29T14:14:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h2><p>jsonp是一种跨域的请求方式,可以从其他域名获取数据,即跨域读取数据。</p>
<h2 id="jsonp函数的实现方法"><a href="#jsonp函数的实现方法" class="headerlink" title="jsonp函数的实现方法"></a>jsonp函数的实现方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">* @Author: accord</span></div><div class="line"><span class="comment">* @Date:   2016-10-08 11:17:21</span></div><div class="line"><span class="comment">* @Last Modified by:   accord</span></div><div class="line"><span class="comment">* @Last Modified time: 2016-10-08 15:46:18</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window,document</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> jsonp = <span class="function"><span class="keyword">function</span>(<span class="params">url,data,callback</span>)</span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">/*随机一个callback函数名 */</span></div><div class="line">		<span class="keyword">var</span> callbackFuncName = <span class="string">'Callback_'</span> + <span class="built_in">Math</span>.random().toString().replace(<span class="string">'.'</span>,<span class="string">''</span>);</div><div class="line"></div><div class="line">		<span class="comment">/*添加回调函数*/</span></div><div class="line">		<span class="built_in">window</span>[callbackFuncName] = callback;</div><div class="line"></div><div class="line">		<span class="comment">/*分解data对象,拼接成url字符串形式*/</span></div><div class="line"></div><div class="line">		<span class="comment">/* &#123;id:1,name:'taoyage'&#125; =&gt; ?id=1&amp;name=taoyage&amp; */</span></div><div class="line">		<span class="keyword">var</span> querystring = url.indexOf(<span class="string">'?'</span>)== <span class="number">-1</span> ? <span class="string">'?'</span>:<span class="string">'&amp;'</span>;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> data)&#123;</div><div class="line">			querystring += key + <span class="string">'='</span> + data[key] + <span class="string">'&amp;'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/*进行拼接*/</span></div><div class="line">		<span class="comment">/* ?id=1&amp;name=taoyage&amp;callback=jsonCallback_1231313 */</span></div><div class="line">		querystring += <span class="string">'callback='</span> + callbackFuncName;</div><div class="line"></div><div class="line">		<span class="comment">/*创建script标签*/</span></div><div class="line">		<span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">		script.src = url + querystring;</div><div class="line">		<span class="built_in">document</span>.body.appendChild(script);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">window</span>.$jsonp = jsonp;</div><div class="line"></div><div class="line">&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;jsonp&quot;&gt;&lt;a href=&quot;#jsonp&quot; class=&quot;headerlink&quot; title=&quot;jsonp&quot;&gt;&lt;/a&gt;jsonp&lt;/h2&gt;&lt;p&gt;jsonp是一种跨域的请求方式,可以从其他域名获取数据,即跨域读取数据。&lt;/p&gt;
&lt;h2 id=&quot;jsonp函数的实
    
    </summary>
    
      <category term="web前端" scheme="http://www.taoyage.net/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="-- jsonp -- jsonp函数实现方法 -- javascript实现jsonp函数" scheme="http://www.taoyage.net/tags/jsonp-jsonp%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95-javascript%E5%AE%9E%E7%8E%B0jsonp%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>NeDB中文文档</title>
    <link href="http://www.taoyage.net/2016/09/29/NeDB%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    <id>http://www.taoyage.net/2016/09/29/NeDB中文文档/</id>
    <published>2016-09-29T15:41:15.000Z</published>
    <updated>2016-10-01T16:29:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NeDB简介"><a href="#NeDB简介" class="headerlink" title="NeDB简介"></a>NeDB简介</h2><p>NeDB是一款用于Node.js开发的NoSQL嵌入式内存数据库,完全采用javascript开发,可以使用在html5桌面应用程序,以及浏览器端应用,其api是MongoDB的一个子集,具有简单,轻量,速度快等特点.</p>
<h2 id="安装NeDB"><a href="#安装NeDB" class="headerlink" title="安装NeDB"></a>安装NeDB</h2><p>NeDB可以通过npm和bower来进行安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install nedb --save</span></div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> bower install nedb --save</span></div></pre></td></tr></table></figure>
<h2 id="NeDB-API"><a href="#NeDB-API" class="headerlink" title="NeDB API"></a>NeDB API</h2><h3 id="创建-加载一个数据库"><a href="#创建-加载一个数据库" class="headerlink" title="创建/加载一个数据库"></a>创建/加载一个数据库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 类型 1: 创建一个内存数据库 (不需要去加载数据库)</span></div><div class="line"><span class="keyword">var</span> Datastore = <span class="built_in">require</span>(<span class="string">'nedb'</span>)</div><div class="line"><span class="keyword">var</span> db = <span class="keyword">new</span> Datastore();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 类型 2: 本地存储数据库,需要手动去加载数据库</span></div><div class="line"><span class="keyword">var</span> Datastore = <span class="built_in">require</span>(<span class="string">'nedb'</span>)</div><div class="line"><span class="keyword">var</span> db = <span class="keyword">new</span> Datastore(&#123; <span class="attr">filename</span>: <span class="string">'path/to/datafile'</span> &#125;);</div><div class="line"></div><div class="line">db.loadDatabase(); <span class="comment">//数据库可以直接加载或者用下面这种回调的方式</span></div><div class="line">db.loadDatabase(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123; </div><div class="line">	</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 类型 3: 本地存储数据,自动加载数据库</span></div><div class="line"><span class="keyword">var</span> Datastore = <span class="built_in">require</span>(<span class="string">'nedb'</span>)</div><div class="line">  , db = <span class="keyword">new</span> Datastore(&#123; <span class="attr">filename</span>: <span class="string">'path/to/datafile'</span>, <span class="attr">autoload</span>: <span class="literal">true</span> &#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 类型 4: 本地存储数据用于html5和javascript来制作的桌面应用程序去调用'nwtest'</span></div><div class="line"><span class="comment">// 举例,在linux上, data文件在 ~/.config/nwtest/nedb-data/something.db</span></div><div class="line"><span class="keyword">var</span> Datastore = <span class="built_in">require</span>(<span class="string">'nedb'</span>)</div><div class="line">  , path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line">  , db = <span class="keyword">new</span> Datastore(&#123; <span class="attr">filename</span>: path.join(<span class="built_in">require</span>(<span class="string">'nw.gui'</span>).App.dataPath, <span class="string">'something.db'</span>) &#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 类型 5: 创建多个数据库</span></div><div class="line">db = &#123;&#125;;</div><div class="line">db.users = <span class="keyword">new</span> Datastore(<span class="string">'path/to/users.db'</span>);</div><div class="line">db.robots = <span class="keyword">new</span> Datastore(<span class="string">'path/to/robots.db'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 如果不配置autoload,这里需要手动加载数据库(该方法是异步的)</span></div><div class="line">db.users.loadDatabase();</div><div class="line">db.robots.loadDatabase();</div></pre></td></tr></table></figure>
<h3 id="插入数据-db-inster-doc-callback"><a href="#插入数据-db-inster-doc-callback" class="headerlink" title="插入数据(db.inster(doc,callback))"></a>插入数据(db.inster(doc,callback))</h3><p>数据类型可以是String,Number,Boolean,Date,null,也可以使用数组和对象来进行存储.如果字段是undefined,将不会进行存储(这一点和MongoDB有点不同,MongoDB会吧undefined自动转换成null来进行存储).</p>
<p>如果文档中没有id字段,NeDB将自动生成一个16位字符的字符串存储到数据库,无法修改.</p>
<p>字段名不能以’$’开头或包含’.’</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> doc = &#123; </div><div class="line">	hello: <span class="string">'world'</span>,</div><div class="line">	n: <span class="number">5</span>, </div><div class="line">	today: <span class="keyword">new</span> <span class="built_in">Date</span>(),</div><div class="line">	nedbIsAwesome: <span class="literal">true</span>,</div><div class="line">	notthere: <span class="literal">null</span>,</div><div class="line">	notToBeSaved: <span class="literal">undefined</span>,  <span class="comment">//undefined值将不会进行存储</span></div><div class="line">	fruits: [ <span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'pear'</span> ],</div><div class="line">	infos: &#123; <span class="attr">name</span>: <span class="string">'nedb'</span> &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">db.insert(doc, <span class="function"><span class="keyword">function</span> (<span class="params">err, newDoc</span>) </span>&#123;  </div><div class="line">	<span class="comment">// Callback</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//callback函数可有可无也可以写成下面这种形式</span></div><div class="line"></div><div class="line">db.insert(doc)</div></pre></td></tr></table></figure>
<h3 id="插入多个数组"><a href="#插入多个数组" class="headerlink" title="插入多个数组"></a>插入多个数组</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">db.insert([<span class="comment">&#123; a: 5 &#125;</span>, <span class="comment">&#123; a: 42 &#125;</span>], <span class="function"><span class="keyword">function</span> <span class="params">(err, newDocs)</span> <span class="comment">&#123;</span></span></div><div class="line"><span class="function"><span class="comment"> 	</span></span></div><div class="line"><span class="function"><span class="comment">&#125;</span>);</span></div><div class="line"></div><div class="line"><span class="comment">// 以下的例子,两个a字段的值相同将会报错</span></div><div class="line">db.insert([<span class="comment">&#123; a: 5 &#125;</span>, <span class="comment">&#123; a: 42 &#125;</span>, <span class="comment">&#123; a: 5 &#125;</span>], <span class="function"><span class="keyword">function</span> <span class="params">(err)</span> <span class="comment">&#123;</span></span></div><div class="line"><span class="function"><span class="comment"></span></span></div><div class="line"><span class="function"><span class="comment">&#125;</span>);</span></div></pre></td></tr></table></figure>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>这里拟定了一个数据库,下面所介绍的内容,都会以这个数据库进行操作,举例</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">_id:</span> <span class="string">'id1'</span>, <span class="string">planet:</span> <span class="string">'Mars'</span>, <span class="string">system:</span> <span class="string">'solar'</span>, <span class="string">inhabited:</span> <span class="literal">false</span>, <span class="string">satellites:</span> [<span class="string">'Phobos'</span>, <span class="string">'Deimos'</span>] &#125;</div><div class="line">&#123; <span class="string">_id:</span> <span class="string">'id2'</span>, <span class="string">planet:</span> <span class="string">'Earth'</span>, <span class="string">system:</span> <span class="string">'solar'</span>, <span class="string">inhabited:</span> <span class="literal">true</span>, <span class="string">humans:</span> &#123; <span class="string">genders:</span> <span class="number">2</span>, <span class="string">eyes:</span> <span class="literal">true</span> &#125; &#125;</div><div class="line">&#123; <span class="string">_id:</span> <span class="string">'id3'</span>, <span class="string">planet:</span> <span class="string">'Jupiter'</span>, <span class="string">system:</span> <span class="string">'solar'</span>, <span class="string">inhabited:</span> <span class="literal">false</span> &#125;</div><div class="line">&#123; <span class="string">_id:</span> <span class="string">'id4'</span>, <span class="string">planet:</span> <span class="string">'Omicron Persei 8'</span>, <span class="string">system:</span> <span class="string">'futurama'</span>, <span class="string">inhabited:</span> <span class="literal">true</span>, <span class="string">humans:</span> &#123; <span class="string">genders:</span> <span class="number">7</span> &#125; &#125;</div><div class="line">&#123; <span class="string">_id:</span> <span class="string">'id5'</span>, <span class="string">completeData:</span> &#123; <span class="string">planets:</span> [ &#123; <span class="string">name:</span> <span class="string">'Earth'</span>, <span class="string">number:</span> <span class="number">3</span> &#125;, &#123; <span class="string">name:</span> <span class="string">'Mars'</span>, <span class="string">number:</span> <span class="number">2</span> &#125;, &#123; <span class="string">name:</span> <span class="string">'Pluton'</span>, <span class="string">number:</span> <span class="number">9</span> &#125; ] &#125; &#125;</div></pre></td></tr></table></figure>
<h3 id="查找文档-db-find-query-callback"><a href="#查找文档-db-find-query-callback" class="headerlink" title="查找文档(db.find({query},callback))"></a>查找文档(db.find({query},callback))</h3><p>在对文档进行匹配查询的时候,可以去使用($lt, $lte, $gt, $gte, $in, $nin, $ne)比较运算符,也可以去使用($or, $and, $not , $where)逻辑运算符,以及正则表达式.</p>
<p>callback(可选): 包含参数err和docs，err里是错误信息，docs是查询到的文档.</p>
<h4 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 查找所有带有solar的数据</span></div><div class="line">db.find(&#123; <span class="attr">system</span>: <span class="string">'solar'</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, docs</span>) </span>&#123;</div><div class="line">  <span class="comment">// 这里的docs返回的将id1,id2,id3文档的数组</span></div><div class="line">  <span class="comment">// 如果没有查询到含有solar值的system字段,docs返回的将是一个[]</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用正则表达式去匹配查询含有/ar/值的planet字段文档</span></div><div class="line">db.find(&#123; <span class="attr">planet</span>: <span class="regexp">/ar/</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, docs</span>) </span>&#123;</div><div class="line">  <span class="comment">// 返回的docs将是包含mars,earth值的文档</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用多个条件去查询</span></div><div class="line">db.find(&#123; <span class="attr">system</span>: <span class="string">'solar'</span>, <span class="attr">inhabited</span>: <span class="literal">true</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, docs</span>) </span>&#123;</div><div class="line">  <span class="comment">// 这里的docs返回的将是只包含Earth值的文档</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用对象的匹配查找</span></div><div class="line">db.find(&#123; <span class="string">"humans.genders"</span>: <span class="number">2</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, docs</span>) </span>&#123;</div><div class="line">  <span class="comment">// docs返回的将是包含Earth值的文档</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 通过数组对象去匹配查询</span></div><div class="line">db.find(&#123; <span class="string">"completeData.planets.name"</span>: <span class="string">"Mars"</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, docs</span>) </span>&#123;</div><div class="line">  <span class="comment">// 这里将返回id5的文档</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">db.find(&#123; <span class="string">"completeData.planets.name"</span>: <span class="string">"Jupiter"</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, docs</span>) </span>&#123;</div><div class="line">  <span class="comment">// 返回空数组</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">db.find(&#123; <span class="string">"completeData.planets.0.name"</span>: <span class="string">"Earth"</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, docs</span>) </span>&#123;</div><div class="line">  <span class="comment">// 返回id5的文档</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 对象深度比较查询，不要与"."的使用混淆</span></div><div class="line">db.find(&#123; <span class="attr">humans</span>: &#123; <span class="attr">genders</span>: <span class="number">2</span> &#125; &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, docs</span>) </span>&#123;</div><div class="line">  <span class="comment">// 返回空, 因为 &#123; genders: 2 &#125; 不等于 &#123; genders: 2, eyes: true &#125;</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 查询匹配所有文档</span></div><div class="line">db.find(&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, docs</span>) </span>&#123;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 如果只想查找某一条文档,可以使用唯一的id来进行查询</span></div><div class="line">db.findOne(&#123; <span class="attr">_id</span>: <span class="string">'id1'</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, doc</span>) </span>&#123;</div><div class="line">  <span class="comment">// 如果没有匹配的文档,返回的将是null</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="使用比较运算符查询-lt-lte-gt-gte-in-nin-ne-exists-regex"><a href="#使用比较运算符查询-lt-lte-gt-gte-in-nin-ne-exists-regex" class="headerlink" title="使用比较运算符查询($lt, $lte, $gt, $gte, $in, $nin, $ne, $exists, $regex)"></a>使用比较运算符查询($lt, $lte, $gt, $gte, $in, $nin, $ne, $exists, $regex)</h4><p>语法是 <code>{ field: { $op: value } }</code> 这里的 <code>$op</code> 是表示这里可以填写任意的运算符</p>
<ul>
<li>$lt, $lte: 小于，小于等于</li>
<li>$gt, $gte: 大于，大于等于</li>
<li>$in: 属于</li>
<li>$ne, $nin: 不等于，不属于</li>
<li>$exists: 取值为true或者false，用于检测文档是否具有某一字段</li>
<li>$regex: 检测字符串是否与正则表达式相匹配</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// $lt, $lte, $gt , $gte 只能用于数字和字符串</span></div><div class="line">db.find(&#123; <span class="string">"humans.genders"</span>: &#123; $gt: <span class="number">5</span> &#125; &#125;, <span class="function"><span class="keyword">function</span> <span class="params">(err, docs)</span> </span>&#123;</div><div class="line">  <span class="comment">// 这里doc返回将是一个humans.genders值大于5的文档</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 当使用字符串的时候,将使用字典里字母的顺序进行匹配查找</span></div><div class="line">db.find(&#123; planet: &#123; $gt: <span class="string">'Mercury'</span> &#125;&#125;, <span class="function"><span class="keyword">function</span> <span class="params">(err, docs)</span> </span>&#123;</div><div class="line">  <span class="comment">// 返回的是包含Omicron Persei 8值的文档</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// $in和$nin 的使用方式相同</span></div><div class="line">db.find(&#123; planet: &#123; $in: [<span class="string">'Earth'</span>, <span class="string">'Jupiter'</span>] &#125;&#125;, <span class="function"><span class="keyword">function</span> <span class="params">(err, docs)</span> </span>&#123;</div><div class="line">  <span class="comment">// 返回含有 Earth 和 Jupiter 值的文档</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用 $exists</span></div><div class="line">db.find(&#123; satellites: &#123; $exists: <span class="keyword">true</span> &#125; &#125;, <span class="function"><span class="keyword">function</span> <span class="params">(err, docs)</span> </span>&#123;</div><div class="line">  <span class="comment">// docs contains only Mars</span></div><div class="line">  <span class="comment">// 返回含有Mars值的文档</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 同时使用正则和其他匹配方式进行匹配</span></div><div class="line">db.find(&#123; planet: &#123; $regex: /ar/, $nin: [<span class="string">'Jupiter'</span>, <span class="string">'Earth'</span>] &#125; &#125;, <span class="function"><span class="keyword">function</span> <span class="params">(err, docs)</span> </span>&#123;</div><div class="line">  <span class="comment">// docs only contains Mars because Earth was excluded from the match by $nin</span></div><div class="line">  <span class="comment">// 返回结果应该只有包含Mars值的文档,因为$nin匹配方式排除了含有Earth值的文档</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="使用数组字段查询"><a href="#使用数组字段查询" class="headerlink" title="使用数组字段查询"></a>使用数组字段查询</h4><p>当你的文档里有一个字段是数组时,NeDB首先会尝试去看是不是一个数组,如果是的话会进行精确匹配查找,然后去判断此数组是否使用了具体的比较运算操作方法(这里只支持<code>$size</code>和<code>$elemMatch</code>),如果没有,会对其所有元素进行匹配.</p>
<ul>
<li>$size 匹配数组长度</li>
<li>$$elemMatch 如果对象有一个元素是数组,匹配数组内的元素 </li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">// 精确匹配</div><div class="line">db.find(&#123; satellites: [<span class="string">'Phobos'</span>, <span class="string">'Deimos'</span>] &#125;, <span class="keyword">function</span> (err, docs) &#123;</div><div class="line">  // 返回的是含有Mars值的文档</div><div class="line">&#125;)</div><div class="line">db.find(&#123; satellites: [<span class="string">'Deimos'</span>, <span class="string">'Phobos'</span>] &#125;, <span class="keyword">function</span> (err, docs) &#123;</div><div class="line">  // 返回空</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 使用具体的比较方法</div><div class="line">// 使用$elemMatch进行数组匹配,所有的条件都要匹配上才行</div><div class="line">db.find(&#123; completeData: &#123; planets: &#123; $elemMatch: &#123; name: <span class="string">'Earth'</span>, number: <span class="number">3</span> &#125; &#125; &#125; &#125;, <span class="keyword">function</span> (err, docs) &#123;</div><div class="line">  // 这里返回的是包含id5的文档</div><div class="line">&#125;);</div><div class="line"></div><div class="line">db.find(&#123; completeData: &#123; planets: &#123; $elemMatch: &#123; name: <span class="string">'Earth'</span>, number: <span class="number">5</span> &#125; &#125; &#125; &#125;, <span class="keyword">function</span> (err, docs) &#123;</div><div class="line">  // 这里返回空</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 你可以在$elemMatch中使用任何比较运算操作</div><div class="line">db.find(&#123; completeData: &#123; planets: &#123; $elemMatch: &#123; name: <span class="string">'Earth'</span>, number: &#123; $gt: <span class="number">2</span> &#125; &#125; &#125; &#125; &#125;, <span class="keyword">function</span> (err, docs) &#123;</div><div class="line">  // 返回含有id5的文档</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 注意不能使用嵌套的运算符, e.g. &#123; $size: &#123; $lt: <span class="number">5</span> &#125; &#125; 将会发生错误</div><div class="line">db.find(&#123; satellites: &#123; $size: <span class="number">2</span> &#125; &#125;, <span class="keyword">function</span> (err, docs) &#123;</div><div class="line">  // 返回含有mars值的文档</div><div class="line">&#125;);</div><div class="line"></div><div class="line">db.find(&#123; satellites: &#123; $size: <span class="number">1</span> &#125; &#125;, <span class="keyword">function</span> (err, docs) &#123;</div><div class="line">  // 返回空数组</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 如果文档的字段是一个数组,匹配数组中的任意一个字段</div><div class="line">db.find(&#123; satellites: <span class="string">'Phobos'</span> &#125;, <span class="keyword">function</span> (err, docs) &#123;</div><div class="line">  // 返回mars值的文档</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="使用逻辑运算符-or-and-not-where"><a href="#使用逻辑运算符-or-and-not-where" class="headerlink" title="使用逻辑运算符$or, $and, $not, $where"></a>使用逻辑运算符$or, $and, $not, $where</h4><p>你可以结合逻辑运算符去查询</p>
<ul>
<li>$or,$and 或和与 </li>
<li>$no 非</li>
<li>$where 指定条件</li>
</ul>
<p>暂时还没有写完</p>
<p>此文档由本人自己翻译,如果有错误或者翻译不对的地方请留下建议,万分感谢,如有转载者请注明,并加上链接</p>
<p>此文章原文链接:<a href="http://www.taoyage.net/2016/09/29/NeDB中文文档">http://www.taoyage.net/2016/09/29/NeDB中文文档</a></p>
<p>此文档原英文文档链接:<a href="https://github.com/louischatriot/nedb#creatingloading-a-database" target="_blank" rel="external">https://github.com/louischatriot/nedb#creatingloading-a-database</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;NeDB简介&quot;&gt;&lt;a href=&quot;#NeDB简介&quot; class=&quot;headerlink&quot; title=&quot;NeDB简介&quot;&gt;&lt;/a&gt;NeDB简介&lt;/h2&gt;&lt;p&gt;NeDB是一款用于Node.js开发的NoSQL嵌入式内存数据库,完全采用javascript开发,可以使用
    
    </summary>
    
      <category term="后台开发" scheme="http://www.taoyage.net/categories/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="node嵌入式数据库" scheme="http://www.taoyage.net/tags/node%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="NeDB中文文档" scheme="http://www.taoyage.net/tags/NeDB%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    
      <category term="NeDB中文API" scheme="http://www.taoyage.net/tags/NeDB%E4%B8%AD%E6%96%87API/"/>
    
      <category term="NeDB教程" scheme="http://www.taoyage.net/tags/NeDB%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://www.taoyage.net/2016/09/28/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.taoyage.net/2016/09/28/git常用命令/</id>
    <published>2016-09-28T15:41:04.000Z</published>
    <updated>2016-09-28T15:07:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始化本地git仓库"><a href="#初始化本地git仓库" class="headerlink" title="初始化本地git仓库"></a>初始化本地git仓库</h3><p><code>$ git init</code></p>
<h3 id="查看当前仓库状态"><a href="#查看当前仓库状态" class="headerlink" title="查看当前仓库状态"></a>查看当前仓库状态</h3><p><code>$ git status</code></p>
<h3 id="查看修改日志"><a href="#查看修改日志" class="headerlink" title="查看修改日志"></a>查看修改日志</h3><p><code>$ git log</code></p>
<h3 id="恢复到某个版本"><a href="#恢复到某个版本" class="headerlink" title="恢复到某个版本"></a>恢复到某个版本</h3><p><code>$ git reset --hard HEAD</code>(HEAD 指的是通过<code>$ git log</code>命令来获取的commit的后6位值)</p>
<h3 id="添加所有文件到缓存"><a href="#添加所有文件到缓存" class="headerlink" title="添加所有文件到缓存"></a>添加所有文件到缓存</h3><p><code>$ git add --all</code></p>
<h3 id="提交修改信息"><a href="#提交修改信息" class="headerlink" title="提交修改信息"></a>提交修改信息</h3><p><code>$ git commit -m &quot;修改信息&quot;</code></p>
<h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><p><code>$ git push -u origin master</code></p>
<h3 id="从远程仓库获取数据"><a href="#从远程仓库获取数据" class="headerlink" title="从远程仓库获取数据"></a>从远程仓库获取数据</h3><p><code>$ git pull origin master</code></p>
<h3 id="列出所有分支"><a href="#列出所有分支" class="headerlink" title="列出所有分支"></a>列出所有分支</h3><p><code>$ git branch</code></p>
<h3 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h3><p><code>$ git branch name</code></p>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p><code>$ git checkout name</code></p>
<h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><p><code>$ git branch -d name</code></p>
<h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p><code>$ git push origin : name</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;初始化本地git仓库&quot;&gt;&lt;a href=&quot;#初始化本地git仓库&quot; class=&quot;headerlink&quot; title=&quot;初始化本地git仓库&quot;&gt;&lt;/a&gt;初始化本地git仓库&lt;/h3&gt;&lt;p&gt;&lt;code&gt;$ git init&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;查看
    
    </summary>
    
      <category term="前端开发工具" scheme="http://www.taoyage.net/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="-- git -- github" scheme="http://www.taoyage.net/tags/git-github/"/>
    
  </entry>
  
  <entry>
    <title>gulp.js-前端自动化构建工具</title>
    <link href="http://www.taoyage.net/2016/09/27/gulp/"/>
    <id>http://www.taoyage.net/2016/09/27/gulp/</id>
    <published>2016-09-27T05:27:20.000Z</published>
    <updated>2016-09-30T03:57:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将带着你构建一个完整的gulp自动化开发环境</p>
<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>gulp基于nodejs的前端自动化工具,在使用前需要先安装nodejs,这里对nodejs的安装不做详细介绍具体参考nodejs官网。</p>
<h2 id="全局安装gulp"><a href="#全局安装gulp" class="headerlink" title="全局安装gulp"></a>全局安装gulp</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">npm</span> install --<span class="built_in">global</span> gulp</div></pre></td></tr></table></figure>
<h2 id="初始化你的项目目录"><a href="#初始化你的项目目录" class="headerlink" title="初始化你的项目目录"></a>初始化你的项目目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm init</span></div></pre></td></tr></table></figure>
<p>此时在你的项目根目录下将会出现一个package.json的文件,用来管理通过npm安装的模块</p>
<h2 id="安装gulp到你的项目"><a href="#安装gulp到你的项目" class="headerlink" title="安装gulp到你的项目"></a>安装gulp到你的项目</h2><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp --<span class="built_in">save</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure>
<p>查看package.json查看是否存在以下纪录,有则代表安装成功,之后在接下来所安装成功的模块都会依次出现在”devDependencies”下面</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"devDependencies"</span>: &#123;</div><div class="line">  <span class="string">"gulp"</span>: <span class="string">"^3.9.1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在跟目录下创建gulpfile-js文件"><a href="#在跟目录下创建gulpfile-js文件" class="headerlink" title="在跟目录下创建gulpfile.js文件"></a>在跟目录下创建gulpfile.js文件</h2><p>打开gulpfile.js文件,写入以下代码,加载刚刚安装的gulp模块</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">const gulp</span> = require(<span class="string">"gulp"</span>);</div></pre></td></tr></table></figure>
<h2 id="安装gulp插件"><a href="#安装gulp插件" class="headerlink" title="安装gulp插件"></a>安装gulp插件</h2><p>gulp有很多第三方开发的插件,这些插件都可以通过</p>
<p><code>$ npm install packageName --save-dev</code> 来进行安装</p>
<p>根据项目,来安装自己所需要的插件包,这篇文章里介绍几个常用的插件来做示例</p>
<h3 id="gulp-concat"><a href="#gulp-concat" class="headerlink" title="gulp-concat"></a>gulp-concat</h3><p>gulp-concat是一个用来合并文件的插件,一般用来合并js文件较多</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> gulp-<span class="keyword">concat</span> <span class="comment">--save-dev</span></div></pre></td></tr></table></figure>
<h4 id="gulpfile-示例"><a href="#gulpfile-示例" class="headerlink" title="gulpfile 示例"></a>gulpfile 示例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</div><div class="line"><span class="keyword">const</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./js/*.js'</span>) <span class="comment">//指定要被合并的文件</span></div><div class="line">  .pipe(concat(<span class="string">'app.js'</span>)) <span class="comment">//将以上目录下的.js文件都合并到app.js文件中 </span></div><div class="line">  .pipe(gulp.dest(<span class="string">'./dist/'</span>)); <span class="comment">//配置app.js的输出目录</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="gulp-sass"><a href="#gulp-sass" class="headerlink" title="gulp-sass"></a>gulp-sass</h3><p>gulp-sass 自动将sass文件编译成css文件</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp-sass --<span class="built_in">save</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure>
<h4 id="gulpfile-示例-1"><a href="#gulpfile-示例-1" class="headerlink" title="gulpfile 示例"></a>gulpfile 示例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</div><div class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./sass/**/*.scss'</span>)</div><div class="line">    .pipe(sass().on(<span class="string">'error'</span>, sass.logError))</div><div class="line">    .pipe(gulp.dest(<span class="string">'./dest/css/'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="gulp-watch"><a href="#gulp-watch" class="headerlink" title="gulp-watch"></a>gulp-watch</h3><p>gulp－watch 用来自动监控任务</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp-watch --<span class="built_in">save</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure>
<h4 id="gulpfile-示例-2"><a href="#gulpfile-示例-2" class="headerlink" title="gulpfile 示例"></a>gulpfile 示例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</div><div class="line"><span class="keyword">const</span> watch = <span class="built_in">require</span>(<span class="string">'gulp-watch'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watch'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	watch([<span class="string">'./js/**/*.js'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		gulp.start(<span class="string">'scripts'</span>);</div><div class="line">	&#125;);</div><div class="line">	watch(<span class="string">'./sass/**/*.scss'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		gulp.start(<span class="string">'scripts'</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="gulpfile-最终代码示例"><a href="#gulpfile-最终代码示例" class="headerlink" title="gulpfile 最终代码示例"></a>gulpfile 最终代码示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</div><div class="line"><span class="keyword">const</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</div><div class="line"><span class="keyword">const</span> watch = <span class="built_in">require</span>(<span class="string">'gulp-watch'</span>);</div><div class="line"></div><div class="line"><span class="comment">/*合并js*/</span></div><div class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> gulp.src(<span class="string">'./js/**/*.js'</span>)</div><div class="line">	.pipe(concat(<span class="string">'app.js'</span>))</div><div class="line">	.pipe(gulp.dest(<span class="string">'./dist/js/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/*编译sass*/</span></div><div class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> gulp.src(<span class="string">'./sass/**/*.scss'</span>)</div><div class="line">	.pipe(sass().on(<span class="string">'error'</span>, sass.logError))</div><div class="line">	.pipe(gulp.dest(<span class="string">'./dest/css/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/*监控*/</span></div><div class="line">gulp.task(<span class="string">'watch'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	watch([<span class="string">'./js/**/*.js'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		gulp.start(<span class="string">'scripts'</span>);</div><div class="line">	&#125;);</div><div class="line">	watch(<span class="string">'./sass/**/*.scss'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		gulp.start(<span class="string">'scripts'</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watch'</span>]);</div></pre></td></tr></table></figure>
<p>此时只要在终端输入<code>$ gulp</code> 将自动执行以上配置好的任务<br>只要监控的文件发生改变,将会自动执行合并js任务或编译sass任务</p>
<p>更完整的gulp配置可以看：<a href="https://github.com/taoyage/gulp" target="_blank" rel="external">https://github.com/taoyage/gulp</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将带着你构建一个完整的gulp自动化开发环境&lt;/p&gt;
&lt;h2 id=&quot;安装nodejs&quot;&gt;&lt;a href=&quot;#安装nodejs&quot; class=&quot;headerlink&quot; title=&quot;安装nodejs&quot;&gt;&lt;/a&gt;安装nodejs&lt;/h2&gt;&lt;p&gt;gulp基于nodejs的前
    
    </summary>
    
      <category term="前端开发工具" scheme="http://www.taoyage.net/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="-- gulp -- 前端自动化工具" scheme="http://www.taoyage.net/tags/gulp-%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>markdown基本语法</title>
    <link href="http://www.taoyage.net/2016/09/27/markdown/"/>
    <id>http://www.taoyage.net/2016/09/27/markdown/</id>
    <published>2016-09-26T17:12:54.000Z</published>
    <updated>2016-09-30T03:58:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># h1</div><div class="line">## h2</div><div class="line">### h3</div><div class="line">#### h4</div><div class="line">##### h5</div><div class="line">###### h6</div></pre></td></tr></table></figure>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> 文本<span class="number">1</span></span></div><div class="line"><span class="ruby">- 文本<span class="number">2</span></span></div><div class="line"><span class="ruby">- 文本<span class="number">3</span></span></div></pre></td></tr></table></figure>
<p>显示效果如下</p>
<ul>
<li>文本1</li>
<li>文本2</li>
<li>文本3</li>
</ul>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> 文本<span class="number">1</span></div><div class="line"><span class="number">2.</span> 文本<span class="number">2</span></div><div class="line"><span class="number">3.</span> 文本<span class="number">3</span></div></pre></td></tr></table></figure>
<p>显示效果如下</p>
<ol>
<li>文本1</li>
<li>文本2</li>
<li>文本3</li>
</ol>
<h2 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h2><p>代码上下分别用三个`来包裹</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var a</span> = 1;</div><div class="line"><span class="attribute">var b</span> = 1;</div><div class="line"><span class="attribute">var c</span> = 1;</div></pre></td></tr></table></figure>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[github首页](https://github.com/taoyage)</div></pre></td></tr></table></figure>
<p>效果如下<br><a href="https://github.com/taoyage" target="_blank" rel="external">github首页</a></p>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![](http:<span class="regexp">//</span>b.zol-img.com.cn<span class="regexp">/desk/</span>bizhi<span class="regexp">/image/</span><span class="number">4</span><span class="regexp">/960x600/</span><span class="number">1395022832519</span>.jpg)</div></pre></td></tr></table></figure>
<p>效果如下</p>
<p><img src="http://b.zol-img.com.cn/desk/bizhi/image/4/960x600/1395022832519.jpg" alt="Alt text"></p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>- -</div></pre></td></tr></table></figure>
<p>效果如下</p>
<p>分割线上</p>
<hr>
<p>分割线下</p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="params">| col1 |</span> col2 <span class="params">| col3 |</span></div><div class="line"><span class="params">|:----:|</span><span class="symbol">:----</span><span class="symbol">:|</span><span class="symbol">:----</span><span class="symbol">:|</span></div><div class="line"><span class="params">|  1   |</span>   <span class="number">2</span>  <span class="params">|   3  |</span></div><div class="line"><span class="params">|  1   |</span>   <span class="number">2</span>  <span class="params">|   3  |</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>col1</th>
<th>col2</th>
<th>col3</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h2&gt;&lt;figure class=&quot;highlight clean&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="前端开发工具" scheme="http://www.taoyage.net/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="markdown语法" scheme="http://www.taoyage.net/tags/markdown%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
